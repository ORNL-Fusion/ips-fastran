#! /usr/bin/env python

"""
 -----------------------------------------------------------------------
 toray component 
 -----------------------------------------------------------------------
"""

import os
import shutil

from  component import Component
from Namelist import Namelist
import toray_io
from efit_eqdsk import readg
from plasmastate import plasmastate

class toray(Component):

    def __init__(self, services, config):

        Component.__init__(self, services, config)
        print 'Created %s' % (self.__class__)

    def init(self, timeStamp=0.0):

        return

    def step(self, timeStamp=0.0):

        #-- entry

        services = self.services

        #-- stage plasma state files

        services.stage_plasma_state()

        #-- excutable

        toray_bin = os.path.join(self.BIN_PATH, self.BIN)
        print toray_bin

        #-- get plasma state file name

        cur_state_file = services.get_config_param('CURRENT_STATE')
        cur_eqdsk_file = services.get_config_param('CURRENT_EQDSK')

        #-- get input files

        services.stage_input_files(self.INPUT_FILES)

        #-- generate toray input

        geq = readg(cur_eqdsk_file) 

        ps = plasmastate('ips',1)
        ps.read(cur_state_file)

        intoray = Namelist("intoray",case="lower")

        var_list = [ var.upper() for var in intoray["intoray"].keys()]
        for key in var_list: 
            for k in range(len( intoray["intoray"][key] )):
                try:
                    intoray["intoray"][key][k] = float(getattr(self, key+"_%d"%k))
                    print key,k, 'updated' 
                except AttributeError:
                    pass 
        intoray.write("intoray")

        ntoray = intoray["intoray"]["ntoray"][0]

        toray_nml = Namelist()
        for key in intoray["edata"].keys():
            toray_nml["edata"][key] = intoray["edata"][key]
        toray_nml.head="generated by toray_io.py\n"
        toray_nml.write("toray.in")

        #-- loop over each source of ECH

        cwd = services.get_working_dir()

        print 'number of gyrotron: ',ntoray
        for k in range(ntoray):

            toray_io.input_from_state(geq,ps,intoray,k)
            
            #-- run toray

            task_id = services.launch_task(1, cwd, toray_bin, logfile = 'xtoray.log')
            retcode = services.wait_task(task_id)

            if retcode != 0:
               print 'Error executing ', 'toray'
               sys.exit(1)

            shutil.copyfile('toray.nc', 'toray_%d.nc'%k)

        #-- get toray output

        toray_io.update_state(geq,ps,intoray)
   
        ps.store(cur_state_file)

        #-- update plasma state files

        services.update_plasma_state()

        #-- archive output files

        services.stage_output_files(timeStamp, self.OUTPUT_FILES)

        return
    
    def finalize(self, timeStamp=0.0):

        return
    
