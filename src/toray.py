#! /usr/bin/env python

"""
 -----------------------------------------------------------------------
 toray component 
 JM
 -----------------------------------------------------------------------
"""

import sys,os,shutil
import subprocess
from numpy import *

from  component import Component

#-------------------
#--- zcode libraries
from Namelist import Namelist
import ztoray,zefitutil
from zplasmastate import plasma_state_file

class toray(Component):

    def __init__(self, services, config):

        Component.__init__(self, services, config)
        print 'Created %s' % (self.__class__)

    def init(self, timeStamp=0.0):

        return

    def step(self, timeStamp=0.0):

        if (self.services == None) :
            print 'Error in toray_init: step () : No services'
            raise Exception('Error in toray_init: step (): No services')
        services = self.services

        try:
            services.stage_plasma_state()
        except Exception, e:
            print 'Error in call to stage_plasma_state()', e

        #--- excutable

        try:
            toray_bin = os.path.join(self.BIN_PATH, self.BIN)
        except:
            toray_bin = os.path.join(self.BIN_PATH, 'xtoray')
        print toray_bin

        #--- get plasma state file name

        cur_state_file = services.get_config_param('CURRENT_STATE')
        cur_eqdsk_file = services.get_config_param('CURRENT_EQDSK')

        # get input files

        services.stage_input_files(self.INPUT_FILES)

        #--- generate toray input

        geq = zefitutil.readg(cur_eqdsk_file) 
        r0  = geq["rzero" ]
        b0  = abs(geq["bcentr"])
        ip  = geq['cpasma']
        ps  = plasma_state_file(cur_state_file,r0=r0,b0=b0,ip=ip)

        intoray = Namelist("intoray",case="lower")

        ntoray = intoray["intoray"]["ntoray"][0]

        toray_nml = Namelist()
        for key in intoray["edata"].keys():
            toray_nml["edata"][key] = intoray["edata"][key]
        toray_nml.head="generated by ztoray.py\n"
        toray_nml.write("toray.in")

        #--- loop over each source of ECH

        cwd = services.get_working_dir()

        print 'number of gyrotron: ',ntoray
        for k in range(ntoray):

            ztoray.io_input_from_state(geq,ps,intoray,k)
            
            #--- run toray
    
            #logfile=open("xtoray.log","w")
            #retcode = subprocess.call([toray_bin],
            #              stdout=logfile,stderr=logfile)
            #logfile.close()

            task_id = services.launch_task(1, cwd, toray_bin, logfile = 'xtoray.log')
            retcode = services.wait_task(task_id)

            if retcode != 0:
               print 'Error executing ', 'toray'
               sys.exit(1)

            shutil.copyfile('toray.nc', 'toray_%d.nc'%k)

        #--- get toray output

        ztoray.io_update_state(geq,ps,intoray)
   
        ps.close()

        #--- update plasma state files

        try:
            services.update_plasma_state()
        except Exception, e:
            print 'Error in call to update_plasma_state()', e
            raise

        #--- archive output files

        try:
            services.stage_output_files(timeStamp, self.OUTPUT_FILES)
        except Exception, e:
            print 'Error in call to stage_output_files()', e
            raise Exception, e

        return
    
    def finalize(self, timeStamp=0.0):

        return
    
