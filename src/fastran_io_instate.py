#!/usr/bin/env python

"""
 ----------------------------------------------------------------------
 fastran solver component IO, instate backend
 ----------------------------------------------------------------------
"""

import os
import shutil
from numpy import *
import netCDF4

from Namelist import Namelist
from zinterp import zinterp
import zfdat

# ======================================================================
# io

def write_input(f_instate, rdir='.'):

    input = Namelist(f_instate)
    instate = input["instate"]
    inmetric = input["inmetric"]

    r0  = instate["r0"][0]
    b0  = abs(instate["b0"][0])
    ip  = instate["ip"][0]

    nrho  = instate['nrho'][0]
    rho   = array(instate['rho'])
    ne    = array(instate['ne'])
    te    = array(instate['te'])
    ti    = array(instate['ti'])
    wbeam = array(instate['wbeam'])
    walp  = array(instate['walpha'])
    zeff  = array(instate['zeff'])
    omega  = array(instate['omega'])

    n_ion  = instate['n_ion'][0]
    a_ion  = array(instate['a_ion'])
    z_ion  = array(instate['z_ion'])
    f_ion  = array(instate['f_ion'])

    n_imp  = instate['n_imp'][0]
    a_imp  = array(instate['a_imp'])
    z_imp  = array(instate['z_imp'])
    f_imp  = array(instate['f_imp'])

    print array([a_ion[k]*f_ion[k] for k in range(n_ion) ] ).sum()

    amain = array( [a_ion[k]*f_ion[k] for k in range(n_ion) ] ).sum()
    zmain = array( [z_ion[k]*f_ion[k] for k in range(n_ion) ] ).sum()
    aimp  = array( [a_imp[k]*f_imp[k] for k in range(n_imp) ] ).sum()
    zimp  = array( [z_imp[k]*f_imp[k] for k in range(n_imp) ] ).sum()

    rb = array(instate["rbdry"])
    zb = array(instate["zbdry"])

    R = 0.5*( max(rb) + min(rb) )
    Z = 0.5*( max(zb) + min(zb) )
    a = 0.5*( max(rb) - min(rb) )
    kappa = 0.5*( ( max(zb) - min(zb) )/ a )
    delta_u = ( R - rb[argmax(zb)] )/a
    delta_l = ( R - rb[argmin(zb)] )/a
    delta = 0.5*( delta_u + delta_l )

    j_rf = array(instate["j_ec"])+array(instate["j_ic"])
    pe_rf = array(instate["pe_ec"])+array(instate["pe_ic"])
    pi_rf = array(instate["pi_ec"])+array(instate["pi_ic"])

    time = 0.0

    f = open(os.path.join(rdir,"inprof"),"w")
    f.write(" # generated by zfastran.py Ver+Oct2009\n")
    zfdat.write_f('inflag'  , [1.0]                    ,'',f)
    zfdat.write_f('time0'   , [time*1.0e-3]            ,'s',f)
    zfdat.write_f('ip'      , [ip]                     ,'', f)
    zfdat.write_f('bcentr'  , [b0]                     ,'', f)
    zfdat.write_f('rmajor'  , [r0]                     ,'', f)
    zfdat.write_f('aminor'  , [a]                      ,'', f)
    zfdat.write_f('elongb'  , [kappa]                  ,'', f)
    zfdat.write_f('trianb'  , [delta]                  ,'', f)
    zfdat.write_f('rho'     , rho                      ,'', f)
    zfdat.write_f('amain'   , nrho*[amain]             ,'', f)
    zfdat.write_f('zmain'   , nrho*[zmain]             ,'', f)
    zfdat.write_f('aimp'    , nrho*[aimp ]             ,'', f)
    zfdat.write_f('zimp'    , nrho*[zimp ]             ,'', f)
    zfdat.write_f('ene'     , instate["ne"]            ,'', f)
    zfdat.write_f('te'      , instate["te"]            ,'', f)
    zfdat.write_f('ti'      , instate["ti"]            ,'', f)
    zfdat.write_f('zeff'    , instate["zeff"]          ,'', f)
    zfdat.write_f('omega'   , instate["omega"]         ,'', f)
    zfdat.write_f('q'       , instate["q"]             ,'', f)
    zfdat.write_f('fp'      , instate["psipol"]        ,'', f)
    zfdat.write_f("curpar"  , instate["j_tot"]         ,'', f)
    zfdat.write_f("curbeam" , instate["j_nb"]          ,'', f)
    zfdat.write_f("currf"   , j_rf                     ,'', f)
    zfdat.write_f("curboot" , instate["j_bs"]          ,'', f)
    zfdat.write_f("enbeam"  , instate["density_beam"]  ,'', f)
    zfdat.write_f("wbeam"   , instate["wbeam"]         ,'', f)
    zfdat.write_f("qbeame"  , instate["pe_nb"]         ,'', f)
    zfdat.write_f("qbeami"  , instate["pi_nb"]         ,'', f)
    zfdat.write_f("enalp"   , instate["density_alpha"] , '',f)
    zfdat.write_f("walp"    , instate["walpha"]        , '',f)
    zfdat.write_f("qtfuse"  , instate["pe_fus"]        , '',f)
    zfdat.write_f("qtfusi"  , instate["pi_fus"]        , '',f)
    zfdat.write_f("qrfe"    , pe_rf                    ,'', f)
    zfdat.write_f("qrfi"    , pi_rf                    ,'', f)
    zfdat.write_f("qrad"    , instate["p_rad"]         ,'', f)
    zfdat.write_f("qohm"    , instate["p_ohm"]         ,'', f)
    zfdat.write_f("qione"   , instate["pe_ionization"] ,'', f)
    zfdat.write_f("qioni"   , instate["pi_ionization"] ,'', f)
    zfdat.write_f("qcx"     , instate["pi_cx"]         ,'', f)
    zfdat.write_f("storqueb", instate["torque_nb"]     ,'', f)
    zfdat.write_f("storque" , instate["torque_in"]     ,'', f)
    zfdat.write_f("sion"    , instate["se_nb"]         ,'', f)
    zfdat.write_f("chie"    , instate["chie"]          ,'', f)
    zfdat.write_f("chii"    , instate["chii"]          ,'', f)
    f.close()

    f = open(os.path.join(rdir,"inmetric"),"w")
    zfdat.write_f('Ip'     , [ip*1.0e6]              , '', f)
    zfdat.write_f('bcentr' , [b0]                    , '', f)
    zfdat.write_f('rmajor' , [r0]                    , '', f)
    zfdat.write_f('aminor' , [a]                     , '', f)
    zfdat.write_f('kappa'  , [kappa]                 , '', f)
    zfdat.write_f('delta'  , [delta]                 , '', f)
    zfdat.write_i('nrho'   , inmetric["nrho"]        , '', f)
    zfdat.write_f('rhob'   , inmetric["rhob"]        , '', f)
    zfdat.write_f('rho'    , inmetric["rho"]         , '', f)
    zfdat.write_f('volp'   , inmetric["volp"]        , '', f)
    zfdat.write_f('ipol'   , inmetric["ipol"]        , '', f)
    zfdat.write_f('g11'    , inmetric["g11"]         , '', f)
    zfdat.write_f('g22'    , inmetric["g22"]         , '', f)
    zfdat.write_f('g33'    , inmetric["g33"]         , '', f)
    zfdat.write_f('gradrho', inmetric["gradrho"]     , '', f)
    zfdat.write_f('area'   , inmetric["area"]        , '', f)
    zfdat.write_f('a'      , inmetric["rminor"]      , '', f)
    zfdat.write_f('rtor'   , inmetric["rmajor"]      , '', f)
    zfdat.write_f('shift'  , inmetric["shift"]       , '', f)
    zfdat.write_f('elong'  , inmetric["kappa"]       , '', f)
    zfdat.write_f('triag'  , inmetric["delta"]       , '', f)
    zfdat.write_f('pmhd'   , inmetric["pmhd"]        , '', f)
    zfdat.write_f('qmhd'   , inmetric["qmhd"]        , '', f)
    zfdat.write_f('er'     , zeros(nrho)             , '', f)
    zfdat.write_f('nc1'    , inmetric["nc1"]         , '', f)
    zfdat.write_f('hfac1'  , inmetric["hfac1"]       , '', f)
    zfdat.write_f('hfac2'  , inmetric["hfac2"]       , '', f)
    f.close()


def update_state(f_instate, f_fastran,relax=1.0):

    # -----------------------------------------------------------------
    # read fastran

    fastran = netCDF4.Dataset(f_fastran,'r',format='NETCDF4')
    rho = fastran.variables["rho"][:]
    nrho = len(rho)

    ne = fastran.variables["ne"][-1,:]
    te = fastran.variables["te"][-1,:]
    ti = fastran.variables["ti"][-1,:]
    omega = fastran.variables["omega"][-1,:]

    j_tot = fastran.variables["j_tot"][-1,:]
    j_oh  = fastran.variables["j_oh"][-1,:]
    j_bs  = fastran.variables["j_bs"][-1,:]

    # -----------------------------------------------------------------
    # update plasma state

    instate = Namelist(f_instate)
    if nrho != instate["instate"]["nrho"][0]:
        raise Exception('nrho differ, fastran: %d, instate: %s'%(nrho,ps.nrho))

    instate["instate"]["ne"] = (1.0-relax)*array(instate["instate"]["ne"]) + relax*ne
    instate["instate"]["te"] = (1.0-relax)*array(instate["instate"]["te"]) + relax*te
    instate["instate"]["ti"] = (1.0-relax)*array(instate["instate"]["ti"]) + relax*ti
    instate["instate"]["omega"] = (1.0-relax)*array(instate["instate"]["omega"]) + relax*omega
    instate["instate"]["j_tot"] = j_tot
    instate["instate"]["j_oh" ] = j_oh
    instate["instate"]["j_bs" ] = j_bs
    instate.write(f_instate)

#-----------------------------------------------------------------------
# test

if __name__ == "__main__":

    pass
