"""
 ----------------------------------------------------------------------
 fastran solver component IO, instate backend
 ----------------------------------------------------------------------
"""

import os
import numpy as np
import netCDF4
from Namelist import Namelist
from fastran.solver import zfdat
from fastran.state.instate import Instate


def write_input(f_instate, rdir='.'):
    instate = Instate(f_instate)
    inmetric = instate.data["inmetric"]

    r0 = instate["r0"][0]
    b0 = abs(instate["b0"][0])
    ip = instate["ip"][0]

    nrho = instate['nrho'][0]
    rho = instate['rho']
    ne = instate['ne']
    te = instate['te']
    ti = instate['ti']
    zeff = instate['zeff']
    omega = instate['omega']
    wbeam = instate['wbeam']
    walp = instate['walpha']

    amain = [np.sum(instate["f_ion"]*instate["a_ion"])]
    zmain = [np.sum(instate["f_ion"]*instate["z_ion"])]
    if instate.density_model == 0:
        nimp = [1]
        aimp = [instate["a_imp"][0]]
        zimp = [instate["z_imp"][0]]
        fimp = [1.0]
    elif instate.density_model == 1:
        aimp = []
        zimp = []
        fimp = []
        for k in range(instate["n_imp"][0]):
            if instate["z_imp"][k] == 2 and instate["a_imp"][k] == 4:
                continue
            else:
                aimp.append(instate["a_imp"][k])
                zimp.append(instate["z_imp"][k])
                fimp.append(instate["f_imp"][k])
        nimp = [len(aimp)]
    else:
        raise Exception("density_model not in [0, 1]")

    rb = instate["rbdry"]
    zb = instate["zbdry"]

    R = 0.5*(np.max(rb) + np.min(rb))
    Z = 0.5*(np.max(zb) + np.min(zb))
    a = 0.5*(np.max(rb) - np.min(rb))
    kappa = 0.5*((np.max(zb) - np.min(zb)) / a)
    delta_u = (R - rb[np.argmax(zb)])/a
    delta_l = (R - rb[np.argmin(zb)])/a
    delta = 0.5*(delta_u + delta_l)

    j_rf = instate["j_ec"] + instate["j_ic"]
    pe_rf = instate["pe_ec"] + instate["pe_ic"]
    pi_rf = instate["pi_ec"] + instate["pi_ic"]

    time = 0.0

    f = open(os.path.join(rdir, "inprof"), "w")
    f.write(" # generated by fastran_io_instate.py\n")
    zfdat.write_f('inflag', [1.0], '', f)
    zfdat.write_f('time0', [time*1.0e-3], 's', f)
    zfdat.write_f('ip', [ip], '', f)
    zfdat.write_f('bcentr', [b0], '', f)
    zfdat.write_f('rmajor', [r0], '', f)
    zfdat.write_f('aminor', [a], '', f)
    zfdat.write_f('elongb', [kappa], '', f)
    zfdat.write_f('trianb', [delta], '', f)
    zfdat.write_f('rho', rho, '', f)
    zfdat.write_f('amain', amain, '', f)
    zfdat.write_f('zmain', zmain, '', f)
    zfdat.write_i('nimp', nimp, '', f)
    zfdat.write_f('aimp', aimp, '', f)
    zfdat.write_f('zimp', zimp, '', f)
    zfdat.write_f('fimp', fimp, '', f)
    zfdat.write_f('ene', instate["ne"], '', f)
    zfdat.write_f('te', instate["te"], '', f)
    zfdat.write_f('ti', instate["ti"], '', f)
    zfdat.write_f('zeff', instate["zeff"], '', f)
    zfdat.write_f('omega', instate["omega"], '', f)
    zfdat.write_f('q', instate["q"], '', f)
    zfdat.write_f('fp', instate["psipol"], '', f)
    zfdat.write_f("curpar", instate["j_tot"], '', f)
    zfdat.write_f("curbeam", instate["j_nb"], '', f)
    zfdat.write_f("currf", j_rf, '', f)
    zfdat.write_f("curboot", instate["j_bs"], '', f)
    zfdat.write_f("enbeam", instate["density_beam"], '', f)
    zfdat.write_f("wbeam", instate["wbeam"], '', f)
    zfdat.write_f("qbeame", instate["pe_nb"], '', f)
    zfdat.write_f("qbeami", instate["pi_nb"], '', f)
    zfdat.write_f("enalp", instate["density_alpha"], '', f)
    zfdat.write_f("walp", instate["walpha"], '', f)
    zfdat.write_f("qtfuse", instate["pe_fus"], '', f)
    zfdat.write_f("qtfusi", instate["pi_fus"], '', f)
    zfdat.write_f("qrfe", pe_rf, '', f)
    zfdat.write_f("qrfi", pi_rf, '', f)
    zfdat.write_f("qrad", instate["p_rad"], '', f)
    zfdat.write_f("qohm", instate["p_ohm"], '', f)
    zfdat.write_f("qione", instate["pe_ionization"], '', f)
    zfdat.write_f("qioni", instate["pi_ionization"], '', f)
    zfdat.write_f("qcx", instate["pi_cx"], '', f)
    zfdat.write_f("storqueb", instate["torque_nb"], '', f)
    zfdat.write_f("storque", instate["torque_in"], '', f)
    zfdat.write_f("sion", instate["se_nb"], '', f)
    zfdat.write_f("chie", instate["chie"], '', f)
    zfdat.write_f("chii", instate["chii"], '', f)
    f.close()

    f = open(os.path.join(rdir, "inmetric"), "w")
    zfdat.write_f('Ip', [ip*1.0e6], '', f)
    zfdat.write_f('bcentr', [b0], '', f)
    zfdat.write_f('rmajor', [r0], '', f)
    zfdat.write_f('aminor', [a], '', f)
    zfdat.write_f('kappa', [kappa], '', f)
    zfdat.write_f('delta', [delta], '', f)
    zfdat.write_i('nrho', inmetric["nrho"], '', f)
    zfdat.write_f('rhob', inmetric["rhob"], '', f)
    zfdat.write_f('rho', inmetric["rho"], '', f)
    zfdat.write_f('volp', inmetric["volp"], '', f)
    zfdat.write_f('ipol', inmetric["ipol"], '', f)
    zfdat.write_f('g11', inmetric["g11"], '', f)
    zfdat.write_f('g22', inmetric["g22"], '', f)
    zfdat.write_f('g33', inmetric["g33"], '', f)
    zfdat.write_f('gradrho', inmetric["gradrho"], '', f)
    zfdat.write_f('area', inmetric["area"], '', f)
    zfdat.write_f('a', inmetric["rminor"], '', f)
    zfdat.write_f('rtor', inmetric["rmajor"], '', f)
    zfdat.write_f('shift', inmetric["shift"], '', f)
    zfdat.write_f('elong', inmetric["kappa"], '', f)
    zfdat.write_f('triag', inmetric["delta"], '', f)
    zfdat.write_f('pmhd', inmetric["pmhd"], '', f)
    zfdat.write_f('qmhd', inmetric["qmhd"], '', f)
    zfdat.write_f('er', np.zeros(nrho), '', f)
    zfdat.write_f('nc1', inmetric["nc1"], '', f)
    zfdat.write_f('hfac1', inmetric["hfac1"], '', f)
    zfdat.write_f('hfac2', inmetric["hfac2"], '', f)
    f.close()


def update_state(f_instate, f_fastran, relax=1.):
    # -----------------------------------------------------------------
    # read fastran
    fastran = netCDF4.Dataset(f_fastran, 'r', format='NETCDF4')
    rho = fastran.variables["rho"][:]
    nrho = len(rho)

    ne = fastran.variables["ne"][-1, :]
    te = fastran.variables["te"][-1, :]
    ti = fastran.variables["ti"][-1, :]
    omega = fastran.variables["omega"][-1, :]
    zeff = fastran.variables["zeff"][-1, :]

    j_tot = fastran.variables["j_tot"][-1, :]
    j_oh = fastran.variables["j_oh"][-1, :]
    j_bs = fastran.variables["j_bs"][-1, :]
    j_bs = fastran.variables["j_bs"][-1, :]

    # -----------------------------------------------------------------
    # update plasma state
    #instate = Namelist(f_instate)
    #if nrho != instate["instate"]["nrho"][0]:
    #    raise Exception('nrho differ, fastran: %d, instate: %s' % (nrho, ps.nrho))

    #instate["instate"]["ne"] = (1.0-relax)*np.array(instate["instate"]["ne"]) + relax*ne
    #instate["instate"]["te"] = (1.0-relax)*np.array(instate["instate"]["te"]) + relax*te
    #instate["instate"]["ti"] = (1.0-relax)*np.array(instate["instate"]["ti"]) + relax*ti
    #instate["instate"]["omega"] = (1.0-relax)*np.array(instate["instate"]["omega"]) + relax*omega
    #instate["instate"]["j_tot"] = j_tot
    #instate["instate"]["j_oh"] = j_oh
    #instate["instate"]["j_bs"] = j_bs
    #instate.write(f_instate)

    instate = Instate(f_instate)
    if nrho != instate["nrho"][0]:
        raise Exception('nrho differ, fastran: %d, instate: %s' % (nrho, ps.nrho))

    instate["ne"] = (1. - relax)*np.array(instate["ne"]) + relax*ne
    instate["te"] = (1. - relax)*np.array(instate["te"]) + relax*te
    instate["ti"] = (1. - relax)*np.array(instate["ti"]) + relax*ti
    instate["omega"] = (1. - relax)*np.array(instate["omega"]) + relax*omega
    instate["j_tot"] = j_tot
    instate["j_oh"] = j_oh
    instate["j_bs"] = j_bs

    instate["pe_fus"] = fastran.variables["pe_fus"][-1, :]
    instate["pi_fus"] = fastran.variables["pi_fus"][-1, :]

    instate["density_he"] = fastran.variables["nhe"][-1, :]

    instate.write(f_instate)


# -----------------------------------------------------------------------
# test
if __name__ == "__main__":
    pass
